{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "WaterTracker",
    "description": "This is a sample documentation for the WaterTracker application based on OpenApi 3.0.1. This documentation provides access to the core functionalities of our service. The API enables you to retrieve and send data, manage resources, and interact with the application. We continuously work on improving it, updating, and expanding its functionality. Please review our documentation to learn how to get started with our API and seamlessly integrate it into your projects.",
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "http://localhost:3000",       
      "description": "Development server"
    },
    {
      "url": "https://stackninjas-backend.onrender.com",
      "description": "Publishing server"
    }
  ],
  
  "tags": [
    { "name": "Auth", "description": "Authorization endpoints" },
    { "name": "Aquatrack", "description": "Aquatrack endpoints" },
    { "name": "Hydration-entries", "description": "Hydration-entries endpoints" },
    { "name": "Api-docs", "description": "Prodject documentation endpoints" }
  ],

  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "description": "Registration user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email already use",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login an account",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/auth/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [{ "in": "path", "name": "_id" }],
        "responses": {
          "204": {
            "description": "Logout success",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get info about current user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Operation success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/auth/profile": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update user's data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user's data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "Page not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/auth/avatars": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user's avatar image",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update's object avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object", 
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user avatar image success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/UpdateAvatarUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "File is absent",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/aquatrack/daily-water-requirement": {
      "patch": {
        "tags": ["Aquatrack"],
        "summary": "Update data norms daily water requirement",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update data norms daily water requirement",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/UpdateDailyWaterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/UpdateDailyWaterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required daily water requirement field",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },

          "404": {
            "description": "Page not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/hydration-entries/": {
      "post": {
        "tags": ["Hydration-entries"],
        "summary": "Add task",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Object for adding",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/AddHydrationEntriesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/AddHydrationEntriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    
    "/api/hydration-entries/today": {
      "get": {
        "tags": ["Hydration-entries"],
        "summary": "Progress drinking water for today and get all hydration-entries tasks for today",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/ProgressForTodayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Set your daily water requirement",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found(404)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [],
                  "description": "Empty array"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },


    "/api/hydration-entries/{entryId}": {
      "get": {
        "tags": ["Hydration-entries"],
        "summary": "Get task hydration-entries by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task with id=entryId found"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "Task hydration-entries not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },

      "delete": {
        "tags": ["Hydration-entries"],
        "summary": "Delete task hydration-entries by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task with id=entryId deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "Task hydration-entries not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },

      "put": {
        "tags": ["Hydration-entries"],
        "summary": "Update task hydration-entries by id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Object for update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/UpdateHydrationEntriesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/UpdateHydrationEntriesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found(404)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "id entryId not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },


    "/api/api-docs": {
      "get": {
        "tags": ["Api-docs"],
        "summary": "Swagger endpoints documentation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/DocsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    }


  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password", "passwordRepeat"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user11@mail.com",
            "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "user-11.password12345678"
          },
          "passwordRepeat": {
            "type": "string",
            "description": "User's repeat password",
            "example": "user-11.password12345678"
          }

        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Registration success"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user11@mail.com",
            "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "user-11.password12345678"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token",
            "example": "token"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user11@mail.com",
                "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
              }
            }
          }
        }
      },

      
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id",
                "example": "658403f367c68f1d83745893"
              },
              "token": {
                "type": "string",
                "description": "Access token",
                "example": "token"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User11"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user11@mail.com",
                "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
              },
              "password": {
                "type": "string",
                "description": "User's password",
                "example": "user-11.password12345678"
              },
              "gender": {
                "type": "string",
                "description": "Gender (girl || man)",
                "example": "girl"
              },
              "avatar": {
                "type": "string",
                "description": "URL for users avatar image",
                "example": "http://avatar_link.com"
              },
              "dailyWaterRequirement": {
                "type": "integer",
                "description": "Requirement water for one day",
                "example": "1500"
              }
            }
          }
        }
      },

      "UpdateUserRequest": {
        "type": "object",
        "required": ["_id"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User11_1"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user11@mail.com",
            "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
          },
          "gender": {
            "type": "string",
            "description": "User's gender: [\"girl\", \"man\"]",
            "enum": ["girl", "man"],
            "example": "girl"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "12345678"
          },
          "passwordRepeat": {
            "type": "string",
            "description": "User's repeat password",
            "example": "12345678"
          },
          "passwordOutdated": {
            "type": "string",
            "description": "User's old password",
            "example": "user-11.password12345678"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id",
                "example": "658403f367c68f1d83745893"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User11_1"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user11@mail.com",
                "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$"
              },
              "gender": {
                "type": "string",
                "description": "Gender (girl || man)",
                "enum": ["girl", "man"],
                "example": "girl"
              },
              "avatar": {
                "type": "string",
                "description": "URL for users avatar image",
                "example": "http://avatar.com"
              },
              "dailyWaterRequirement": {
                "type": "integer",
                "description": "Requirement water for one day",
                "example": "1200"
              },
              "createdAt": {
                "type": "string",
                "description": "DateTime of creating user",
                "example": "2023-12-21T09:22:59.612Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "DateTime of last updating user",
                "example": "2023-12-22T19:53:52.702Z"
              }
            }
          }
        }
      },

      "UpdateAvatarUserRequest": {
        "type": "object",
        "required": ["_id", "avatar"],
        "properties": {
          "avatar": {
            "type": "file",
            "format":"binary"
          }
        }
      },
      "UpdateAvatarUserResponse": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "example": "http://avatar_link.com"
          }
        }
      },

      "UpdateDailyWaterRequest": {
        "type": "object",
        "properties": {
          "dailyWaterRequirement": {
            "type": "integer",
            "description": "Requirement water for one day",
            "example": "1200"
          }
        }
      },
      "UpdateDailyWaterResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "658403f367c68f1d83745893"
          },
          "dailyWaterRequirement": {
            "type": "integer",
            "description": "Requirement water for one day",
            "example": "1200"
          }
        }
      },

      "UpdateHydrationEntriesRequest": {
        "type": "object",
        "required": ["entryId"],
        "properties": {
          "time": {
            "type": "string",
            "description": "DateTime of adding task",
            "pattern": "^(202[3-9]|20[3-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
            "example": "2023-12-22T17:23:56.789+00:00"
          },
          "amount": {
            "type": "integer",
            "description": "How many mililitres of the water entries",
            "example": "1500"
          }
        }
      },
      "UpdateHydrationEntriesResponse": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "description": "DateTime of adding task",
            "pattern": "^(202[3-9]|20[3-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
            "example": "2023-12-22T17:23:56.789+00:00"
          },
          "amount": {
            "type": "integer",
            "description": "How many mililitres of the water entries",
            "example": "1500"
          },
          "owner": {
            "type": "string",
            "description": "Owner's user id"
          },
          "_id": {
            "type": "string",
            "description": "Water task id"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creating task"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last updating task"
          }
        }
      },

      "AddHydrationEntriesRequest": {
        "type": "object",
        "required": ["time", "amount"],
        "properties": {
          "time": {
            "type": "string",
            "description": "DateTime of adding task",
            "pattern": "^(202[3-9]|20[3-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
            "example": "2023-12-22T17:23:56.789+00:00"
          },
          "amount": {
            "type": "integer",
            "description": "How many mililitres of the water entries",
            "example": "1700"
          }
        }
      },
      "AddHydrationEntriesResponse": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "description": "DateTime of adding task",
            "pattern": "^(202[3-9]|20[3-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
            "example": "2023-12-22T17:23:56.789+00:00"
          },
          "amount": {
            "type": "integer",
            "description": "How many mililitres of the water entries",
            "example": "1700"
          },
          "owner": {
            "type": "string",
            "description": "Owner's user id"
          },
          "_id": {
            "type": "string",
            "description": "Hydration-entries task id"
          },
          "createdAt": {
            "type": "string",
            "description": "DateTime of creating task",
            "example": "2023-12-20T15:23:56.789+00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "DateTime of last updating task",
            "example": "2023-12-22T17:23:56.789+00:00"
          }
        }
      },
      
      "ProgressForTodayResponse": {
        "type": "object",
        "properties": {
          "data": [{
            "time": {
              "type": "string",
              "description": "DateTime of adding task",
              "pattern": "^(202[3-9]|20[3-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
              "example": "2023-12-22T17:23:56.789+00:00"
            },
            "amount": {
              "type": "integer",
              "description": "How many mililitres of the water entries",
              "example": "1500"
            },
            "owner": {
              "type": "string",
              "description": "Owner's user id"
            },
            "_id": {
              "type": "string",
              "description": "Hydration-entries task id"
            },
            "createdAt": {
              "type": "string",
              "description": "DateTime of creating task"
            },
            "updatedAt": {
              "type": "string",
              "description": "DateTime of last updating task"
            }
          }],
          "progress": {
            "type": "integer",
            "description": "Progress drinking water for today"
          }
        }
      },

      "DocsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Html swagger document"
          }
        }
      }

    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}